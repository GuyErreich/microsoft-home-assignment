{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "keyVaultName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Azure Key Vault."
      }
    },
    "adminObjectId": {
      "type": "string",
      "metadata": {
        "description": "The Azure Active Directory (AAD) Object ID of the admin user."
      }
    },
    "sshPrivateKey": {
      "type": "string",
      "metadata": {
        "description": "SSH public key to store in the Key Vault."
      }
    },
    "storageAccountPrefix": {
      "type": "string",
      "defaultValue": "mynewstorage",
      "metadata": {
        "description": "Prefix for the storage account names. Must be globally unique."
      }
    },
    "vnetName": {
      "type": "string",
      "defaultValue": "my-vnet",
      "metadata": {
        "description": "The name of the virtual network."
      }
    },
    "securityGroupName": {
      "type": "string",
      "defaultValue": "my-nsg",
      "metadata": {
        "description": "The name of the network security group."
      }
    },
    "vmName": {
      "type": "string",
      "defaultValue": "myLinuxVM",
      "metadata": {
        "description": "The name of the Linux virtual machine."
      }
    },
    "adminUsername": {
      "type": "string",
      "defaultValue": "azureuser",
      "metadata": {
        "description": "Administrator username for the VM."
      }
    },
    "sshPublicKey": {
      "type": "string",
      "metadata": {
        "description": "SSH public key for the VM."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "eastus",
      "metadata": {
        "description": "Azure region where the VM will be deployed."
      }
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_B1s",
      "metadata": {
        "description": "Size of the VM instance."
      }
    }
  },
  "resources": [
    // Define the Vault and Key
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2023-07-01",
      "name": "[parameters('keyVaultName')]",
      "location": "[parameters('location')]",
      "properties": {
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "tenantId": "[subscription().tenantId]",
        "accessPolicies": [],
        // "enablePurgeProtection": true,
        "enableSoftDelete": true
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/accessPolicies",
      "apiVersion": "2023-07-01",
      "name": "[concat(parameters('keyVaultName'), '/add')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
      ],
      "properties": {
        "accessPolicies": [
          {
            "objectId": "[parameters('adminObjectId')]",
            "tenantId": "[subscription().tenantId]",
            "permissions": {
              "keys": [ "get", "list", "create", "delete", "update", "import", "backup", "restore", "recover", "purge" ],
              "secrets": [ "get", "list", "set", "delete", "recover", "backup", "restore" ],
              "certificates": [ "get", "list", "create", "delete", "update", "import", "backup", "restore", "recover" ],
              "storage": [ "get", "list", "set", "delete", "update", "backup", "restore", "recover" ]
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-07-01",
      "name": "[concat(parameters('keyVaultName'), '/mySSHKey')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
      ],
      "properties": {
        "value": "[base64ToString(parameters('sshPrivateKey'))]"
      }
    },


    // Define the Storage Accounts
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2023-05-01",
      "name": "[concat(parameters('storageAccountPrefix'), 'sa1')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
      ],
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "properties": {
        "networkAcls": {
          "defaultAction": "Deny",
          "bypass": "AzureServices",
          "virtualNetworkRules": [
            {
              "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), 'default')]"
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2023-05-01",
      "name": "[concat(parameters('storageAccountPrefix'), 'sa2')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
      ],
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "properties": {
        "networkAcls": {
          "defaultAction": "Deny",
          "bypass": "AzureServices",
          "virtualNetworkRules": [
            {
              "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), 'default')]"
            }
          ]
        }
      }
    },
    // {
    //   "type": "Microsoft.Network/privateEndpoints",
    //   "apiVersion": "2024-05-01",
    //   "name": "storage-private-endpoint-sa1",
    //   "location": "[parameters('location')]",
    //   "dependsOn": [
    //     "[resourceId('Microsoft.Storage/storageAccounts', concat(parameters('storageAccountPrefix'), 'sa1'))]"
    //   ],
    //   "properties": {
    //     "privateLinkServiceConnections": [
    //       {
    //         "name": "storage-private-link",
    //         "properties": {
    //           "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', concat(parameters('storageAccountPrefix'), 'sa1'))]",
    //           "groupIds": ["blob"]
    //         }
    //       }
    //     ],
    //     "subnet": {
    //       "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), 'default')]"
    //     }
    //   }
    // },
    // {
    //   "type": "Microsoft.Network/privateEndpoints",
    //   "apiVersion": "2024-05-01",
    //   "name": "storage-private-endpoint-sa2",
    //   "location": "[parameters('location')]",
    //   "dependsOn": [
    //     "[resourceId('Microsoft.Storage/storageAccounts', concat(parameters('storageAccountPrefix'), 'sa2'))]"
    //   ],
    //   "properties": {
    //     "privateLinkServiceConnections": [
    //       {
    //         "name": "storage-private-link",
    //         "properties": {
    //           "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', concat(parameters('storageAccountPrefix'), 'sa2'))]",
    //           "groupIds": ["blob"]
    //         }
    //       }
    //     ],
    //     "subnet": {
    //       "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), 'default')]"
    //     }
    //   }
    // },
    // {
    //   "type": "Microsoft.Network/privateDnsZones",
    //   "apiVersion": "2024-06-01",
    //   "name": "privatelink.blob.core.windows.net",
    //   "location": "global",
    //   "properties": {}
    // },
    // {
    //   "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
    //   "apiVersion": "2024-06-01",
    //   "name": "[concat('privatelink.blob.core.windows.net/', parameters('vnetName'), '-dns-link')]",
    //   "location": "global",
    //   "dependsOn": [
    //     "[resourceId('Microsoft.Network/privateDnsZones', 'privatelink.blob.core.windows.net')]"
    //   ],
    //   "properties": {
    //     "virtualNetwork": {
    //       "id": "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
    //     }
    //   }
    // },


    // Define the Virtual Network and VM
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2024-05-01",
      "name": "[parameters('vnetName')]",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [ "10.0.0.0/16" ]
        },
        "subnets": [
          {
            "name": "default",
            "properties": {
              "addressPrefix": "10.0.0.0/24",
              "serviceEndpoints": [
                {
                  "service": "Microsoft.Storage"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2024-05-01",
      "name": "[parameters('securityGroupName')]",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "AllowSSH",
            "properties": {
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "22",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 1000,
              "direction": "Inbound"
            }
          },
          {
            "name": "AllowAllOutbound",
            "properties": {
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Outbound"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2024-05-01",
      "name": "[concat(parameters('vmName'), '-pip')]",
      "location": "[parameters('location')]",
      "properties": {
        "publicIPAllocationMethod": "Dynamic"
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2024-05-01",
      "name": "[concat(parameters('vmName'), '-nic')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]",
        "[resourceId('Microsoft.Network/publicIPAddresses', concat(parameters('vmName'), '-pip'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('securityGroupName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', concat(parameters('vmName'), '-pip'))]"
              },
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), 'default')]"
              }
            }
          }
        ],
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('securityGroupName'))]"
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2024-07-01",
      "name": "[parameters('vmName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces', concat(parameters('vmName'), '-nic'))]"
      ],
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "[parameters('vmName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": true,
            "ssh": {
              "publicKeys": [
                {
                  "path": "/home/azureuser/.ssh/authorized_keys",
                  "keyData": "[parameters('sshPublicKey')]"
                }
              ]
            }
          }
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "Canonical",
            "offer": "UbuntuServer",
            "sku": "18_04-lts-gen2",
            "version": "latest"
          },
          "osDisk": {
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(parameters('vmName'), '-nic'))]"
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2024-07-01",
      "name": "[concat(parameters('vmName'), '/azure-cli-setup')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
      ],
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "type": "CustomScript",
        "typeHandlerVersion": "2.0",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": [],
          "commandToExecute": "sudo apt-get update && \\
                                sudo apt-get install -y python3.8 python3.8-venv python3.8-dev python3-pip && \\
                                sudo update-alternatives --set python3 /usr/bin/python3.8 && \\
                                python3 -m pip install --upgrade pip && \\
                                python3 -m pip install azure-identity azure-mgmt-storage azure-storage-blob argparse && \\
                                curl -sL https://aka.ms/InstallAzureCLIDeb | bash && \\
                                az login --identity --allow-no-subscriptions"
        }
      }
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[guid(concat(subscription().subscriptionId, parameters('vmName'), '-StorageBlobDataReaderAssignment1'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
      ],
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
        "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('vmName')), '2024-07-01', 'Full').identity.principalId]",
        "principalType": "ServicePrincipal"
      },
      "scope": "[resourceId('Microsoft.Storage/storageAccounts', concat(parameters('storageAccountPrefix'), 'sa1'))]"
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[guid(concat(subscription().subscriptionId, parameters('vmName'), '-StorageBlobDataReaderAssignment2'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
      ],
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
        "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('vmName')), '2024-07-01', 'Full').identity.principalId]",
        "principalType": "ServicePrincipal"
      },
      "scope": "[resourceId('Microsoft.Storage/storageAccounts', concat(parameters('storageAccountPrefix'), 'sa2'))]"
    }
  ]
}
