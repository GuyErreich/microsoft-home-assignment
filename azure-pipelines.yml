trigger:
  branches:
    include:
      - master

pool:
  name: MySelfHostedPool

variables:
  resourceGroupName: "myResourceGroup"
  serviceConnection: "myARMConnection"
  subscriptionId: "938d8cb0-7326-4b21-82ac-a9a5017a87ea"
  sshKeyPath: "$(Build.ArtifactStagingDirectory)/id_rsa"
  keyVaultName: "myPersonalKeyVault2"
  vaultAdmin: "Guy Erreich"

stages:
- stage: Deploy
  displayName: "Deploy"
  jobs:
  - job: preConfigure
    displayName: "Fetch Needed Variables"
    steps:
    - script: |
        ssh-keygen -t rsa -b 2048 -f $(sshKeyPath) -C "azureuser@myserver" -m PEM -N "" -q
        sshPublicKey=$(cat $(sshKeyPath).pub)
        sshPrivateKey=$(base64 -w 0 "$(sshKeyPath)")
        echo "##vso[task.setvariable variable=sshPublicKey;isOutput=true;isSecret=true]$sshPublicKey"
        echo "##vso[task.setvariable variable=sshPrivateKey;isOutput=true;isSecret=true]$sshPrivateKey"
      displayName: "Generate SSH Key"
      name: generateKey

    - task: AzureCLI@2
      displayName: "Get User Object ID"
      name: getAdminObjectID
      inputs:
        azureSubscription: $(serviceConnection)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          userId=$(az ad user list --display-name "$(vaultAdmin)" --query "[0].id" --output tsv)
          
          if [[ -z "$userId" ]]; then
            echo "##vso[task.logissue type=error]Failed to fetch User ID for $(vaultAdmin)."
            exit 1
          fi

          echo "User ID: $userId"
          echo "##vso[task.setvariable variable=adminObjectID;isOutput=true;isSecret=true]$userId"
  
    - script: |
        vmName=$(echo "myLinuxVM$(date +"%d-%m-%Y-%H-%M-%S")")
        echo "vmName=$vmName"
        echo "##vso[task.setvariable variable=vmName;isOutput=true]$vmName"
      displayName: "Generate VM Name"
      name: generateVMName

    - task: AzureCLI@2
      displayName: "Fetch Admin Email"
      name: getAdminEmail
      inputs:
        azureSubscription: $(serviceConnection)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          adminEmail=$(az ad user show --id "$(adminObjectID)" --query "mail" --output tsv)
          
          if [[ -z "$adminEmail" ]]; then
            echo "##vso[task.logissue type=error]Admin Email could not be retrieved."
            exit 1
          fi

          echo "Fetched Admin Email: $adminEmail"
          echo "##vso[task.setvariable variable=adminEmail;isOutput=true;isSecret=true]$adminEmail"

  - job: deployingResources
    displayName: "Deploy Resources"
    dependsOn: preConfigure
    variables:
      sshPrivateKey: $[ dependencies.preConfigure.outputs['generateKey.sshPrivateKey'] ]
      sshPublicKey: $[ dependencies.preConfigure.outputs['generateKey.sshPublicKey'] ]
      adminObjectID: $[ dependencies.preConfigure.outputs['getAdminObjectID.adminObjectID'] ]
      vmName: $[ dependencies.preConfigure.outputs['generateVMName.vmName'] ]
      adminEmail: $[ dependencies.preConfigure.outputs['getAdminEmail.adminEmail'] ]
    steps:
    - task: AzureResourceManagerTemplateDeployment@3
      displayName: "Deploy"
      name: deploy
      inputs:
        deploymentScope: 'Resource Group'
        azureResourceManagerConnection: $(serviceConnection)
        subscriptionId: $(subscriptionId)
        action: 'Create Or Update Resource Group'
        resourceGroupName: $(resourceGroupName)
        location: 'East US'
        templateLocation: 'Linked artifact'
        csmFile: 'myDeployment.json'
        deploymentMode: 'Complete'
        overrideParameters: '-keyVaultName "$(keyVaultName)" -adminObjectID "$(adminObjectID)" -sshPrivateKey "$(sshPrivateKey)" -sshPublicKey "$(sshPublicKey)" -vmName "$(vmName)"'
        deploymentOutputs: 'outputs'
    
    - task: AzureResourceManagerTemplateDeployment@3
      displayName: "Deploy Monitors"
      inputs:
        deploymentScope: 'Resource Group'
        azureResourceManagerConnection: $(serviceConnection)
        subscriptionId: $(subscriptionId)
        action: 'Create Or Update Resource Group'
        resourceGroupName: $(resourceGroupName)
        location: 'East US'
        templateLocation: 'Linked artifact'
        csmFile: 'myMonitors.json'
        deploymentMode: 'Complete'
        overrideParameters: '-vmName "$(setOutput.outputs.vmName)" -storageAccount1 "$(setOutput.outputs.storageName1)" -storageAccount2 "$(setOutput.outputs.storageName2)" -adminEmail $(adminEmail)'

  - job: initResources
    displayName: "Initialize Resources"
    dependsOn: 
      - preConfigure
      - deployingResources
    variables: 
      vmName: $[ dependencies.preConfigure.outputs['generateVMName.vmName'] ]
    steps:
      - task: AzureCLI@2
        inputs:
          azureSubscription: $(serviceConnection)
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            for i in {1..10}; do
              publicIP=$(az network public-ip show --resource-group $(resourceGroupName) --name "$(vmName)-pip" --query "ipAddress" --output tsv)
              if [[ -n "$publicIP" ]]; then
                echo "##vso[task.setvariable variable=publicIP;isSecret=true]$publicIP"
                break
              fi
              echo "Waiting for IP assignment..."
              sleep 10
            done
        displayName: "Fetch Dynamic Public IP of VM"

      - task: AzureCLI@2
        displayName: "Initialize VM Environment"
        inputs:
          azureSubscription: $(serviceConnection)
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            # Detect if running as Service Principal or User
            if az account show --query "user.type" -o tsv | grep -q "servicePrincipal"; then
              OBJECT_ID=$(az ad sp show --id $(az account show --query "user.name" -o tsv) --query "id" -o tsv)
            else
              OBJECT_ID=$(az ad signed-in-user show --query "id" -o tsv)
            fi

            echo "Using Object ID: $OBJECT_ID"

            # Assign Key Vault secret get permission
            az keyvault set-policy \
              --name $(keyVaultName) \
              --object-id "$OBJECT_ID" \
              --secret-permissions get

            make init VM_IP=$(publicIP)

      - task: AzureCLI@2
        displayName: "Populate Storage Accounts"
        inputs:
          azureSubscription: $(serviceConnection)
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            make populate VM_IP=$(publicIP)
